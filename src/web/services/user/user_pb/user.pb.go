// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: user.proto

package user_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdNum     int32    `protobuf:"varint,1,opt,name=IdNum,proto3" json:"IdNum,omitempty"`
	UserName  string   `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	FirstName string   `protobuf:"bytes,3,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName  string   `protobuf:"bytes,4,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Password  string   `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`
	Following []string `protobuf:"bytes,6,rep,name=Following,proto3" json:"Following,omitempty"`
}

func (x *UserStruct) Reset() {
	*x = UserStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStruct) ProtoMessage() {}

func (x *UserStruct) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStruct.ProtoReflect.Descriptor instead.
func (*UserStruct) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserStruct) GetIdNum() int32 {
	if x != nil {
		return x.IdNum
	}
	return 0
}

func (x *UserStruct) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserStruct) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserStruct) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserStruct) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserStruct) GetFollowing() []string {
	if x != nil {
		return x.Following
	}
	return nil
}

type UsersMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User map[string]*UserStruct `protobuf:"bytes,1,rep,name=User,proto3" json:"User,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UsersMap) Reset() {
	*x = UsersMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersMap) ProtoMessage() {}

func (x *UsersMap) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersMap.ProtoReflect.Descriptor instead.
func (*UsersMap) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *UsersMap) GetUser() map[string]*UserStruct {
	if x != nil {
		return x.User
	}
	return nil
}

type IdToUserName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDToNameMap map[int32]string `protobuf:"bytes,1,rep,name=UserIDToNameMap,proto3" json:"UserIDToNameMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdToUserName) Reset() {
	*x = IdToUserName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdToUserName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdToUserName) ProtoMessage() {}

func (x *IdToUserName) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdToUserName.ProtoReflect.Descriptor instead.
func (*IdToUserName) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

func (x *IdToUserName) GetUserIDToNameMap() map[int32]string {
	if x != nil {
		return x.UserIDToNameMap
	}
	return nil
}

type UserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *UserStatus) Reset() {
	*x = UserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatus) ProtoMessage() {}

func (x *UserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatus.ProtoReflect.Descriptor instead.
func (*UserStatus) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3}
}

func (x *UserStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

// will be used at the time of Following as well as un following
type ActionForFollowee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentUserName      string `protobuf:"bytes,1,opt,name=CurrentUserName,proto3" json:"CurrentUserName,omitempty"`
	UserNameForOperation string `protobuf:"bytes,2,opt,name=UserNameForOperation,proto3" json:"UserNameForOperation,omitempty"`
}

func (x *ActionForFollowee) Reset() {
	*x = ActionForFollowee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionForFollowee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionForFollowee) ProtoMessage() {}

func (x *ActionForFollowee) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionForFollowee.ProtoReflect.Descriptor instead.
func (*ActionForFollowee) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4}
}

func (x *ActionForFollowee) GetCurrentUserName() string {
	if x != nil {
		return x.CurrentUserName
	}
	return ""
}

func (x *ActionForFollowee) GetUserNameForOperation() string {
	if x != nil {
		return x.UserNameForOperation
	}
	return ""
}

type UserStructStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *UserStruct `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *UserStructStruct) Reset() {
	*x = UserStructStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStructStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStructStruct) ProtoMessage() {}

func (x *UserStructStruct) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStructStruct.ProtoReflect.Descriptor instead.
func (*UserStructStruct) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5}
}

func (x *UserStructStruct) GetUser() *UserStruct {
	if x != nil {
		return x.User
	}
	return nil
}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x62, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x4c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x49, 0x64, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x54, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x42, 0x0a,
	0x14, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x24, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x71, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x27,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x32, 0xce, 0x04, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x13, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x1a, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x65, 0x1a, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x72, 0x65, 0x64, 0x12, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x13, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x13, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x0d, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x42, 0x03, 0x5a, 0x01, 0x2f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData = file_user_proto_rawDesc
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_proto_rawDescData)
	})
	return file_user_proto_rawDescData
}

var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_user_proto_goTypes = []interface{}{
	(*UserStruct)(nil),        // 0: user_pb.UserStruct
	(*UsersMap)(nil),          // 1: user_pb.UsersMap
	(*IdToUserName)(nil),      // 2: user_pb.IdToUserName
	(*UserStatus)(nil),        // 3: user_pb.UserStatus
	(*ActionForFollowee)(nil), // 4: user_pb.ActionForFollowee
	(*UserStructStruct)(nil),  // 5: user_pb.UserStructStruct
	nil,                       // 6: user_pb.UsersMap.UserEntry
	nil,                       // 7: user_pb.IdToUserName.UserIDToNameMapEntry
}
var file_user_proto_depIdxs = []int32{
	6,  // 0: user_pb.UsersMap.User:type_name -> user_pb.UsersMap.UserEntry
	7,  // 1: user_pb.IdToUserName.UserIDToNameMap:type_name -> user_pb.IdToUserName.UserIDToNameMapEntry
	0,  // 2: user_pb.UserStructStruct.User:type_name -> user_pb.UserStruct
	0,  // 3: user_pb.UsersMap.UserEntry.value:type_name -> user_pb.UserStruct
	0,  // 4: user_pb.UserService.AddToUsersMap:input_type -> user_pb.UserStruct
	4,  // 5: user_pb.UserService.FollowUser:input_type -> user_pb.ActionForFollowee
	4,  // 6: user_pb.UserService.UnfollowUser:input_type -> user_pb.ActionForFollowee
	0,  // 7: user_pb.UserService.CheckCred:input_type -> user_pb.UserStruct
	0,  // 8: user_pb.UserService.GetUserNameByUserId:input_type -> user_pb.UserStruct
	0,  // 9: user_pb.UserService.GetUserFromUserName:input_type -> user_pb.UserStruct
	0,  // 10: user_pb.UserService.GetUserFromUserId:input_type -> user_pb.UserStruct
	0,  // 11: user_pb.UserService.GetAllUsers:input_type -> user_pb.UserStruct
	0,  // 12: user_pb.UserService.ClearAllUsers:input_type -> user_pb.UserStruct
	3,  // 13: user_pb.UserService.AddToUsersMap:output_type -> user_pb.UserStatus
	3,  // 14: user_pb.UserService.FollowUser:output_type -> user_pb.UserStatus
	3,  // 15: user_pb.UserService.UnfollowUser:output_type -> user_pb.UserStatus
	3,  // 16: user_pb.UserService.CheckCred:output_type -> user_pb.UserStatus
	0,  // 17: user_pb.UserService.GetUserNameByUserId:output_type -> user_pb.UserStruct
	5,  // 18: user_pb.UserService.GetUserFromUserName:output_type -> user_pb.UserStructStruct
	5,  // 19: user_pb.UserService.GetUserFromUserId:output_type -> user_pb.UserStructStruct
	1,  // 20: user_pb.UserService.GetAllUsers:output_type -> user_pb.UsersMap
	1,  // 21: user_pb.UserService.ClearAllUsers:output_type -> user_pb.UsersMap
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdToUserName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionForFollowee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStructStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_rawDesc = nil
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	AddToUsersMap(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UserStatus, error)
	FollowUser(ctx context.Context, in *ActionForFollowee, opts ...grpc.CallOption) (*UserStatus, error)
	UnfollowUser(ctx context.Context, in *ActionForFollowee, opts ...grpc.CallOption) (*UserStatus, error)
	//check if user credentials are correct
	CheckCred(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UserStatus, error)
	// get user name by user id
	// take input of user id and return user name
	GetUserNameByUserId(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UserStruct, error)
	// get userstruct from user map
	GetUserFromUserName(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UserStructStruct, error)
	GetUserFromUserId(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UserStructStruct, error)
	GetAllUsers(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UsersMap, error)
	ClearAllUsers(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UsersMap, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddToUsersMap(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UserStatus, error) {
	out := new(UserStatus)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/AddToUsersMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FollowUser(ctx context.Context, in *ActionForFollowee, opts ...grpc.CallOption) (*UserStatus, error) {
	out := new(UserStatus)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/FollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnfollowUser(ctx context.Context, in *ActionForFollowee, opts ...grpc.CallOption) (*UserStatus, error) {
	out := new(UserStatus)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/UnfollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckCred(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UserStatus, error) {
	out := new(UserStatus)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/CheckCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserNameByUserId(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UserStruct, error) {
	out := new(UserStruct)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/GetUserNameByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserFromUserName(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UserStructStruct, error) {
	out := new(UserStructStruct)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/GetUserFromUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserFromUserId(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UserStructStruct, error) {
	out := new(UserStructStruct)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/GetUserFromUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUsers(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UsersMap, error) {
	out := new(UsersMap)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ClearAllUsers(ctx context.Context, in *UserStruct, opts ...grpc.CallOption) (*UsersMap, error) {
	out := new(UsersMap)
	err := c.cc.Invoke(ctx, "/user_pb.UserService/ClearAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	AddToUsersMap(context.Context, *UserStruct) (*UserStatus, error)
	FollowUser(context.Context, *ActionForFollowee) (*UserStatus, error)
	UnfollowUser(context.Context, *ActionForFollowee) (*UserStatus, error)
	//check if user credentials are correct
	CheckCred(context.Context, *UserStruct) (*UserStatus, error)
	// get user name by user id
	// take input of user id and return user name
	GetUserNameByUserId(context.Context, *UserStruct) (*UserStruct, error)
	// get userstruct from user map
	GetUserFromUserName(context.Context, *UserStruct) (*UserStructStruct, error)
	GetUserFromUserId(context.Context, *UserStruct) (*UserStructStruct, error)
	GetAllUsers(context.Context, *UserStruct) (*UsersMap, error)
	ClearAllUsers(context.Context, *UserStruct) (*UsersMap, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) AddToUsersMap(context.Context, *UserStruct) (*UserStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToUsersMap not implemented")
}
func (*UnimplementedUserServiceServer) FollowUser(context.Context, *ActionForFollowee) (*UserStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (*UnimplementedUserServiceServer) UnfollowUser(context.Context, *ActionForFollowee) (*UserStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (*UnimplementedUserServiceServer) CheckCred(context.Context, *UserStruct) (*UserStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCred not implemented")
}
func (*UnimplementedUserServiceServer) GetUserNameByUserId(context.Context, *UserStruct) (*UserStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNameByUserId not implemented")
}
func (*UnimplementedUserServiceServer) GetUserFromUserName(context.Context, *UserStruct) (*UserStructStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFromUserName not implemented")
}
func (*UnimplementedUserServiceServer) GetUserFromUserId(context.Context, *UserStruct) (*UserStructStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFromUserId not implemented")
}
func (*UnimplementedUserServiceServer) GetAllUsers(context.Context, *UserStruct) (*UsersMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (*UnimplementedUserServiceServer) ClearAllUsers(context.Context, *UserStruct) (*UsersMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAllUsers not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_AddToUsersMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddToUsersMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/AddToUsersMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddToUsersMap(ctx, req.(*UserStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionForFollowee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/FollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FollowUser(ctx, req.(*ActionForFollowee))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionForFollowee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/UnfollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnfollowUser(ctx, req.(*ActionForFollowee))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/CheckCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckCred(ctx, req.(*UserStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserNameByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserNameByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/GetUserNameByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserNameByUserId(ctx, req.(*UserStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserFromUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserFromUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/GetUserFromUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserFromUserName(ctx, req.(*UserStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserFromUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserFromUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/GetUserFromUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserFromUserId(ctx, req.(*UserStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUsers(ctx, req.(*UserStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ClearAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ClearAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_pb.UserService/ClearAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ClearAllUsers(ctx, req.(*UserStruct))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user_pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToUsersMap",
			Handler:    _UserService_AddToUsersMap_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _UserService_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _UserService_UnfollowUser_Handler,
		},
		{
			MethodName: "CheckCred",
			Handler:    _UserService_CheckCred_Handler,
		},
		{
			MethodName: "GetUserNameByUserId",
			Handler:    _UserService_GetUserNameByUserId_Handler,
		},
		{
			MethodName: "GetUserFromUserName",
			Handler:    _UserService_GetUserFromUserName_Handler,
		},
		{
			MethodName: "GetUserFromUserId",
			Handler:    _UserService_GetUserFromUserId_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _UserService_GetAllUsers_Handler,
		},
		{
			MethodName: "ClearAllUsers",
			Handler:    _UserService_ClearAllUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
