// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: tokenActions.proto

package tokenActions_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthenticationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenMap map[string]int32 `protobuf:"bytes,1,rep,name=TokenMap,proto3" json:"TokenMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AuthenticationToken) Reset() {
	*x = AuthenticationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tokenActions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationToken) ProtoMessage() {}

func (x *AuthenticationToken) ProtoReflect() protoreflect.Message {
	mi := &file_tokenActions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationToken.ProtoReflect.Descriptor instead.
func (*AuthenticationToken) Descriptor() ([]byte, []int) {
	return file_tokenActions_proto_rawDescGZIP(), []int{0}
}

func (x *AuthenticationToken) GetTokenMap() map[string]int32 {
	if x != nil {
		return x.TokenMap
	}
	return nil
}

type TokenActionsPbStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      int32  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	TokenStatus bool   `protobuf:"varint,2,opt,name=TokenStatus,proto3" json:"TokenStatus,omitempty"`
	Key         string `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Value       int32  `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *TokenActionsPbStruct) Reset() {
	*x = TokenActionsPbStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tokenActions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenActionsPbStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenActionsPbStruct) ProtoMessage() {}

func (x *TokenActionsPbStruct) ProtoReflect() protoreflect.Message {
	mi := &file_tokenActions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenActionsPbStruct.ProtoReflect.Descriptor instead.
func (*TokenActionsPbStruct) Descriptor() ([]byte, []int) {
	return file_tokenActions_proto_rawDescGZIP(), []int{1}
}

func (x *TokenActionsPbStruct) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *TokenActionsPbStruct) GetTokenStatus() bool {
	if x != nil {
		return x.TokenStatus
	}
	return false
}

func (x *TokenActionsPbStruct) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TokenActionsPbStruct) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_tokenActions_proto protoreflect.FileDescriptor

var file_tokenActions_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x62, 0x22, 0xa2, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4e, 0x0a,
	0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a,
	0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x14, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x62, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x32, 0x95, 0x03, 0x0a, 0x13, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x0d,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x62, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x62, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x62, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x62, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x62, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x62, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x62, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x62, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x42, 0x03, 0x5a, 0x01,
	0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tokenActions_proto_rawDescOnce sync.Once
	file_tokenActions_proto_rawDescData = file_tokenActions_proto_rawDesc
)

func file_tokenActions_proto_rawDescGZIP() []byte {
	file_tokenActions_proto_rawDescOnce.Do(func() {
		file_tokenActions_proto_rawDescData = protoimpl.X.CompressGZIP(file_tokenActions_proto_rawDescData)
	})
	return file_tokenActions_proto_rawDescData
}

var file_tokenActions_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tokenActions_proto_goTypes = []interface{}{
	(*AuthenticationToken)(nil),  // 0: tokenActions_pb.AuthenticationToken
	(*TokenActionsPbStruct)(nil), // 1: tokenActions_pb.TokenActionsPbStruct
	nil,                          // 2: tokenActions_pb.AuthenticationToken.TokenMapEntry
}
var file_tokenActions_proto_depIdxs = []int32{
	2, // 0: tokenActions_pb.AuthenticationToken.TokenMap:type_name -> tokenActions_pb.AuthenticationToken.TokenMapEntry
	1, // 1: tokenActions_pb.TokenActionsService.RegisterToken:input_type -> tokenActions_pb.TokenActionsPbStruct
	1, // 2: tokenActions_pb.TokenActionsService.DeleteToken:input_type -> tokenActions_pb.TokenActionsPbStruct
	1, // 3: tokenActions_pb.TokenActionsService.GetTokenMap:input_type -> tokenActions_pb.TokenActionsPbStruct
	1, // 4: tokenActions_pb.TokenActionsService.ClearAllTokens:input_type -> tokenActions_pb.TokenActionsPbStruct
	1, // 5: tokenActions_pb.TokenActionsService.RegisterToken:output_type -> tokenActions_pb.TokenActionsPbStruct
	1, // 6: tokenActions_pb.TokenActionsService.DeleteToken:output_type -> tokenActions_pb.TokenActionsPbStruct
	0, // 7: tokenActions_pb.TokenActionsService.GetTokenMap:output_type -> tokenActions_pb.AuthenticationToken
	1, // 8: tokenActions_pb.TokenActionsService.ClearAllTokens:output_type -> tokenActions_pb.TokenActionsPbStruct
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tokenActions_proto_init() }
func file_tokenActions_proto_init() {
	if File_tokenActions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tokenActions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tokenActions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenActionsPbStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tokenActions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tokenActions_proto_goTypes,
		DependencyIndexes: file_tokenActions_proto_depIdxs,
		MessageInfos:      file_tokenActions_proto_msgTypes,
	}.Build()
	File_tokenActions_proto = out.File
	file_tokenActions_proto_rawDesc = nil
	file_tokenActions_proto_goTypes = nil
	file_tokenActions_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TokenActionsServiceClient is the client API for TokenActionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenActionsServiceClient interface {
	RegisterToken(ctx context.Context, in *TokenActionsPbStruct, opts ...grpc.CallOption) (*TokenActionsPbStruct, error)
	DeleteToken(ctx context.Context, in *TokenActionsPbStruct, opts ...grpc.CallOption) (*TokenActionsPbStruct, error)
	// return token map to test if token was successfully registered in the database
	GetTokenMap(ctx context.Context, in *TokenActionsPbStruct, opts ...grpc.CallOption) (*AuthenticationToken, error)
	ClearAllTokens(ctx context.Context, in *TokenActionsPbStruct, opts ...grpc.CallOption) (*TokenActionsPbStruct, error)
}

type tokenActionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenActionsServiceClient(cc grpc.ClientConnInterface) TokenActionsServiceClient {
	return &tokenActionsServiceClient{cc}
}

func (c *tokenActionsServiceClient) RegisterToken(ctx context.Context, in *TokenActionsPbStruct, opts ...grpc.CallOption) (*TokenActionsPbStruct, error) {
	out := new(TokenActionsPbStruct)
	err := c.cc.Invoke(ctx, "/tokenActions_pb.TokenActionsService/RegisterToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenActionsServiceClient) DeleteToken(ctx context.Context, in *TokenActionsPbStruct, opts ...grpc.CallOption) (*TokenActionsPbStruct, error) {
	out := new(TokenActionsPbStruct)
	err := c.cc.Invoke(ctx, "/tokenActions_pb.TokenActionsService/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenActionsServiceClient) GetTokenMap(ctx context.Context, in *TokenActionsPbStruct, opts ...grpc.CallOption) (*AuthenticationToken, error) {
	out := new(AuthenticationToken)
	err := c.cc.Invoke(ctx, "/tokenActions_pb.TokenActionsService/GetTokenMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenActionsServiceClient) ClearAllTokens(ctx context.Context, in *TokenActionsPbStruct, opts ...grpc.CallOption) (*TokenActionsPbStruct, error) {
	out := new(TokenActionsPbStruct)
	err := c.cc.Invoke(ctx, "/tokenActions_pb.TokenActionsService/ClearAllTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenActionsServiceServer is the server API for TokenActionsService service.
type TokenActionsServiceServer interface {
	RegisterToken(context.Context, *TokenActionsPbStruct) (*TokenActionsPbStruct, error)
	DeleteToken(context.Context, *TokenActionsPbStruct) (*TokenActionsPbStruct, error)
	// return token map to test if token was successfully registered in the database
	GetTokenMap(context.Context, *TokenActionsPbStruct) (*AuthenticationToken, error)
	ClearAllTokens(context.Context, *TokenActionsPbStruct) (*TokenActionsPbStruct, error)
}

// UnimplementedTokenActionsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTokenActionsServiceServer struct {
}

func (*UnimplementedTokenActionsServiceServer) RegisterToken(context.Context, *TokenActionsPbStruct) (*TokenActionsPbStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterToken not implemented")
}
func (*UnimplementedTokenActionsServiceServer) DeleteToken(context.Context, *TokenActionsPbStruct) (*TokenActionsPbStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (*UnimplementedTokenActionsServiceServer) GetTokenMap(context.Context, *TokenActionsPbStruct) (*AuthenticationToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenMap not implemented")
}
func (*UnimplementedTokenActionsServiceServer) ClearAllTokens(context.Context, *TokenActionsPbStruct) (*TokenActionsPbStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAllTokens not implemented")
}

func RegisterTokenActionsServiceServer(s *grpc.Server, srv TokenActionsServiceServer) {
	s.RegisterService(&_TokenActionsService_serviceDesc, srv)
}

func _TokenActionsService_RegisterToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenActionsPbStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenActionsServiceServer).RegisterToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenActions_pb.TokenActionsService/RegisterToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenActionsServiceServer).RegisterToken(ctx, req.(*TokenActionsPbStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenActionsService_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenActionsPbStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenActionsServiceServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenActions_pb.TokenActionsService/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenActionsServiceServer).DeleteToken(ctx, req.(*TokenActionsPbStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenActionsService_GetTokenMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenActionsPbStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenActionsServiceServer).GetTokenMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenActions_pb.TokenActionsService/GetTokenMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenActionsServiceServer).GetTokenMap(ctx, req.(*TokenActionsPbStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenActionsService_ClearAllTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenActionsPbStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenActionsServiceServer).ClearAllTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenActions_pb.TokenActionsService/ClearAllTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenActionsServiceServer).ClearAllTokens(ctx, req.(*TokenActionsPbStruct))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenActionsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenActions_pb.TokenActionsService",
	HandlerType: (*TokenActionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterToken",
			Handler:    _TokenActionsService_RegisterToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _TokenActionsService_DeleteToken_Handler,
		},
		{
			MethodName: "GetTokenMap",
			Handler:    _TokenActionsService_GetTokenMap_Handler,
		},
		{
			MethodName: "ClearAllTokens",
			Handler:    _TokenActionsService_ClearAllTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokenActions.proto",
}
